// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

// Users --- Oauth
// Users --< Teams
// Users --< ClubMembers
model Users {
  id            Int             @default(autoincrement()) @id
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        Boolean         @default(true)
  gender        Gender

  oauth         Oauth?
  clubMembers   ClubMembers[]
  clubNotices   ClubNotices[]
}

enum OauthProvider {
  KAKAO
}

// Oauth --- Users
model Oauth {
  id            String          @id
  createdAt     DateTime        @default(now())
  provider      OauthProvider
  userId        Int             @unique()

  users         Users           @relation(fields: [userId], references: [id])
}

// Clubs --< ClubMembers
// Clubs --< ClubNotices
model Clubs {
  id                Int             @default(autoincrement()) @id
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  clubMembers       ClubMembers[]
  clubNotices       ClubNotices[]
}

enum Role {
  Leader
  Member
}

model ClubMembers {
  id                Int             @default(autoincrement()) @id
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  clubId            Int
  userId            Int
  role              Role

  clubs             Clubs           @relation(fields:[clubId], references: [id])
  users             Users           @relation(fields:[userId], references: [id])
}

// ClubNotices --< ClubNoticeImages
// ClubNotices --< ClubNoticeComments
model ClubNotices {
  id                    Int             @default(autoincrement()) @id
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  clubId                Int
  userId                Int
  title                 String
  contents              String

  clubs                 Clubs           @relation(fields:[clubId], references: [id])
  users                 Users           @relation(fields:[userId], references: [id])
  clubNoticeImages      ClubNoticeImages[]
  clubNoticeComments    ClubNoticeComments[]
}

model ClubNoticeImages {
  id                Int             @default(autoincrement()) @id
  clubNoticeId      Int
  imageUrl          String

  clubNotices       ClubNotices     @relation(fields:[clubNoticeId], references: [id])
}

// ClubNoticeComments --< ClubNoticeCommentReplies
model ClubNoticeComments {
  id                        Int             @default(autoincrement()) @id
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  contents                  String
  clubNoticeId              Int

  clubNotices               ClubNotices     @relation(fields:[clubNoticeId], references: [id])
  clubNoticeCommentReplies  ClubNoticeCommentReplies[]
}

model ClubNoticeCommentReplies {
  id                        Int                 @default(autoincrement()) @id
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  contents                  String
  clubNoticeCommentId       Int

  clubNoticeComments        ClubNoticeComments  @relation(fields:[clubNoticeCommentId], references: [id])
}