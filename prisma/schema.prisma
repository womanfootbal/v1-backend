// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

// Users --- Oauth
// Users --< Teams
// Users --< ClubMembers
// Users --< ClubMemberApplications
// Users --< ClubNoticeComments
// Users --< ClubNoticeCommentReplies
model Users {
  id                        Int                         @default(autoincrement()) @id
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  status                    Boolean                     @default(true)
  gender                    Gender

  oauth                     Oauth?
  clubMembers               ClubMembers[]
  clubNotices               ClubNotices[]
  clubMemberApplications    ClubMemberApplications[]
  clubNoticeComments        ClubNoticeComments[]
  clubNoticeCommentReplies  ClubNoticeCommentReplies[]
  freeBoardComments         FreeBoardComments[]
  freeBoardCommentReplies   FreeBoardCommentReplies[]
  freeBoardLikes                      FreeBoardLikes[]
}

enum OauthProvider {
  KAKAO
}

// Oauth --- Users
model Oauth {
  id            String          @id
  createdAt     DateTime        @default(now())
  provider      OauthProvider
  userId        Int             @unique()

  users         Users           @relation(fields: [userId], references: [id])
}

enum MainEvent {
  ALL
  FUTSAL
  FOOTBALL
}

enum AgeGroup {
  TEENS
  TWENTIES
  THIRTIES
  FORTIES
  OVER
}

// Clubs --< ClubMembers
// Clubs --< ClubNotices
// Clubs --< ClubMemberApplications
model Clubs {
  id                        Int             @default(autoincrement()) @id
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  status                    Boolean         @default(true)
  mainEvent                 MainEvent       @default(ALL)
  activityRegion            String
  introduce                 String
  ageGroup                  AgeGroup        @default(TWENTIES)
  logoImageUrl              String?

  clubMembers               ClubMembers[]
  clubNotices               ClubNotices[]
  clubMemberApplications    ClubMemberApplications[]
}

enum ApplicationStatus {
  COMPLETED
  WAIT
  CANCEL
}

model ClubMemberApplications {
  id                    Int                 @default(autoincrement()) @id
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  status                Boolean             @default(true)
  applicationStatus     ApplicationStatus   @default(WAIT)
  clubId                Int
  appliedUserId         Int

  clubs                 Clubs               @relation(fields:[clubId], references: [id])
  users                 Users               @relation(fields:[appliedUserId], references: [id])
}

enum Role {
  CAPTAIN
  MEMBER
}

model ClubMembers {
  id                Int             @default(autoincrement()) @id
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  status            Boolean         @default(true)
  clubId            Int
  userId            Int
  role              Role            @default(MEMBER)
  nickName          String

  clubs             Clubs           @relation(fields:[clubId], references: [id])
  users             Users           @relation(fields:[userId], references: [id])
}

// ClubNotices --< ClubNoticeImages
// ClubNotices --< ClubNoticeComments
model ClubNotices {
  id                    Int             @default(autoincrement()) @id
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  clubId                Int
  userId                Int
  title                 String
  contents              String

  clubs                 Clubs           @relation(fields:[clubId], references: [id])
  users                 Users           @relation(fields:[userId], references: [id])
  clubNoticeImages      ClubNoticeImages[]
  clubNoticeComments    ClubNoticeComments[]
}

model ClubNoticeImages {
  id                Int             @default(autoincrement()) @id
  status            Boolean         @default(true)
  clubNoticeId      Int
  imageUrl          String

  clubNotices       ClubNotices     @relation(fields:[clubNoticeId], references: [id])
}

// ClubNoticeComments --< ClubNoticeCommentReplies
model ClubNoticeComments {
  id                        Int             @default(autoincrement()) @id
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  status                    Boolean         @default(true)
  clubNoticeId              Int
  userId                    Int
  contents                  String

  clubNotices               ClubNotices     @relation(fields:[clubNoticeId], references: [id])
  users                     Users           @relation(fields:[userId], references: [id])
  clubNoticeCommentReplies  ClubNoticeCommentReplies[]
}

model ClubNoticeCommentReplies {
  id                        Int                 @default(autoincrement()) @id
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  status                    Boolean             @default(true)
  clubNoticeCommentId       Int
  userId                    Int
  contents                  String

  users                     Users               @relation(fields:[userId], references: [id])
  clubNoticeComments        ClubNoticeComments  @relation(fields:[clubNoticeCommentId], references: [id])
}

model FreeBoards {
  id                        Int                 @default(autoincrement()) @id
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  status                    Boolean             @default(true)
  title                     String
  contents                  String
  userId                    Int

  freeBoardLikes            FreeBoardLikes[]
  freeBoardImages           FreeBoardImages[]
  freeBoardComments         FreeBoardComments[]
}

model FreeBoardLikes{
  id                Int             @default(autoincrement()) @id
  status            Boolean         @default(false)
  freeBoardId       Int
  userId            Int
  
  users             Users           @relation(fields:[userId], references: [id])
  freeBoards        FreeBoards      @relation(fields:[freeBoardId], references: [id])
}

model FreeBoardImages {
  id                Int             @default(autoincrement()) @id
  status            Boolean         @default(true)
  freeBoardId       Int
  imageUrl          String

  freeBoards        FreeBoards      @relation(fields:[freeBoardId], references: [id])
}

model FreeBoardComments {
  id                        Int             @default(autoincrement()) @id
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  status                    Boolean         @default(true)
  freeBoardId               Int
  userId                    Int
  contents                  String

  freeBoards                FreeBoards      @relation(fields:[freeBoardId], references: [id])
  users                     Users           @relation(fields:[userId], references: [id])
  freeBoardCommentReplies   FreeBoardCommentReplies[]
}

model FreeBoardCommentReplies {
  id                        Int                 @default(autoincrement()) @id
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  status                    Boolean             @default(true)
  freeBoardCommentId        Int
  userId                    Int
  contents                  String

  users                     Users               @relation(fields:[userId], references: [id])
  freeBoardComments         FreeBoardComments   @relation(fields:[freeBoardCommentId], references: [id])
}